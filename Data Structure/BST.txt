								Бинарное дерево поиска

-это упорядоченная стркуктура данных
-у каждого элемента есть ровно 2 дочерних элементы: left and rigth
	left элемент меньше родителя, а right больше

-у бинарного дерева есть ВЫСОТА ~= log(N)
-однако эта формула будет правдива только для сбалансированного дерева
	поиска
-сбалансированное дерево поиска - высота left ребека и right ребенка
	должны отличатся не больше чем в 1-цу, ИНАЧЕ ДЕРЕВО НЕСБАЛАНСИРОВАННОЕ!

-эта структура данных позволяет:
	=> поиск: как бинарный поиск: O(log(N))
	=> добавление: как бинарный поиск: O(log(N))
	=> удаление: существует несколбко вариаций
		1. "Удалить 20": иду как бинарный поиск и спокойно удаляю т.к у него нет детей
		2. "Удалить 220": иду как бинарный поиск и свапаю 220 с 210, удаляю 220
		3. "Удалить 50": иду как бинарный поиск, у нас есть как левый ребенок, 
			так и правый. Можно свапнуть 20 с 50, но если бы у 20 были еще дети, 
			этого бы не сработало. Мы должны поставить заместо 50 самый минимальный 
			элемент с правой ветки (70), т.е значение 60.
			Сложность: O(log(N))
пример:
									100
			 50												200
	20			       70						150						220
null null	     60	          80			null   160				210    null
		     null null	   null null	        null null		null  null
